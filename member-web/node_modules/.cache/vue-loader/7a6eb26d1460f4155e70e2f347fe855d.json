{"remainingRequest":"/Users/thossaporn/Desktop/game/member-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/thossaporn/Desktop/game/member-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/thossaporn/Desktop/game/member-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/thossaporn/Desktop/game/member-web/src/components/pages/backend/game/hit/hit.vue?vue&type=template&id=7acab910&scoped=true&","dependencies":[{"path":"/Users/thossaporn/Desktop/game/member-web/src/components/pages/backend/game/hit/hit.vue","mtime":1658307602000},{"path":"/Users/thossaporn/Desktop/game/member-web/node_modules/cache-loader/dist/cjs.js","mtime":1662951618000},{"path":"/Users/thossaporn/Desktop/game/member-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1662951618000},{"path":"/Users/thossaporn/Desktop/game/member-web/node_modules/cache-loader/dist/cjs.js","mtime":1662951618000},{"path":"/Users/thossaporn/Desktop/game/member-web/node_modules/vue-loader/lib/index.js","mtime":1662951618000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}